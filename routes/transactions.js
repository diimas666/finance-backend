const express = require('express');
const router = express.Router();
const Transaction = require('../models/Transaction');
const authMiddleware = require('../middleware/authMiddleware');

// –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
router.post('/', authMiddleware, async (req, res) => {
  const { amount, category, description, type, subcategory, date } = req.body;
  try {
    const transaction = new Transaction({
      userId: req.user.userId,
      amount,
      category,
      description,
      type,
      subcategory, // –°–æ—Ö—Ä–∞–Ω—è–µ–º subcategory
      date: date ? new Date(date) : Date.now(), // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
    });
    await transaction.save();
    res.status(201).json(transaction);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
router.get('/', authMiddleware, async (req, res) => {
  try {
    const transactions = await Transaction.find({ userId: req.user.userId });
    res.json(transactions);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
router.delete('/:id', authMiddleware, async (req, res) => {
  try {
    const transaction = await Transaction.findOneAndDelete({
      _id: req.params.id,
      userId: new mongoose.Types.ObjectId(req.user.userId), // üí• –í–û–¢ –≠–¢–û –î–û–ë–ê–í–ò–õ–ò
    });
    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

module.exports = router;
