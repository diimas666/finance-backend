const express = require('express');
const router = express.Router();
const Goal = require('../models/Goal');
const authMiddleware = require('../middleware/authMiddleware');
const upload = require('../middleware/upload');
const cloudinary = require('../config/cloudinary');

// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
router.post('/', authMiddleware, upload.single('image'), async (req, res) => {
  const { title, targetAmount, savedAmount, deadline } = req.body;

  console.log('üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω');
  console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
  console.log(
    'üñºÔ∏è –§–∞–π–ª:',
    req.file
      ? `${req.file.originalname} (${req.file.mimetype})`
      : '–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'
  );

  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!title || !targetAmount) {
      console.warn('‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: title –∏–ª–∏ targetAmount');
      return res
        .status(400)
        .json({ message: 'Title and targetAmount are required' });
    }

    let imageUrl = '';
    if (req.file) {
      try {
        console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Cloudinary...');
        const result = await new Promise((resolve, reject) => {
          const stream = cloudinary.uploader.upload_stream(
            { folder: 'goals', resource_type: 'image' },
            (error, result) => {
              if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ Cloudinary:', error);
                return reject(error);
              }
              resolve(result);
            }
          );
          stream.end(req.file.buffer);
        });

        imageUrl = result.secure_url;
        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary:', imageUrl);
      } catch (uploadError) {
        console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', uploadError);
        return res.status(500).json({ message: 'Image upload failed' });
      }
    } else {
      console.log(
        '‚ÑπÔ∏è –§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è image.'
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
    const goal = new Goal({
      userId: req.user.userId,
      title,
      targetAmount: Number(targetAmount),
      savedAmount: Number(savedAmount) || 0,
      deadline: deadline || null,
      image: imageUrl, // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, image –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    });

    await goal.save();
    console.log('üéØ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', goal._id);

    res.status(201).json(goal);
  } catch (error) {
    console.error('üî• –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–µ–ª–∏
router.get('/', authMiddleware, async (req, res) => {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.userId);
    const goals = await Goal.find({ userId: req.user.userId });
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${goals.length} —Ü–µ–ª–µ–π`);
    res.json(goals);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å
router.put('/:id', authMiddleware, upload.single('image'), async (req, res) => {
  const { title, targetAmount, savedAmount, deadline } = req.body;

  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å ID ${req.params.id}`);
    const goal = await Goal.findById(req.params.id);

    if (!goal || goal.userId.toString() !== req.user.userId) {
      console.warn('‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return res.status(404).json({ message: 'Goal not found' });
    }

    let imageUrl = goal.image; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (req.file) {
      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary...');
      const result = await new Promise((resolve, reject) => {
        const stream = cloudinary.uploader.upload_stream(
          { folder: 'goals', resource_type: 'image' },
          (error, result) => {
            if (error) return reject(error);
            resolve(result);
          }
        );
        stream.end(req.file.buffer);
      });
      imageUrl = result.secure_url;
      console.log('‚úÖ –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageUrl);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (goal.image && goal.image !== '') {
        const publicId = goal.image.split('/').slice(-1)[0].split('.')[0];
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å publicId: ${publicId}`);
        try {
          await cloudinary.uploader.destroy(`goals/${publicId}`);
          console.log('‚úÖ –°—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        } catch (deleteError) {
          console.error(
            '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:',
            deleteError
          );
        }
      }
    } else {
      console.log(
        '‚ÑπÔ∏è –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ:',
        imageUrl
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ü–µ–ª–∏
    goal.title = title || goal.title;
    goal.targetAmount = targetAmount ? Number(targetAmount) : goal.targetAmount;
    goal.savedAmount = savedAmount ? Number(savedAmount) : goal.savedAmount;
    goal.deadline = deadline || goal.deadline;
    goal.image = imageUrl;

    await goal.save();
    console.log('‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', goal._id);
    res.json(goal);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å
router.delete('/:id', authMiddleware, async (req, res) => {
  try {
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å ID ${req.params.id}`);
    const goal = await Goal.findById(req.params.id);

    if (!goal || goal.userId.toString() !== req.user.userId) {
      console.warn('‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return res.status(404).json({ message: 'Goal not found' });
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Cloudinary, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (goal.image && goal.image !== '') {
      const publicId = goal.image.split('/').slice(-1)[0].split('.')[0];
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å publicId: ${publicId}`);
      try {
        await cloudinary.uploader.destroy(`goals/${publicId}`);
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Cloudinary');
      } catch (deleteError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', deleteError);
      }
    } else {
      console.log('‚ÑπÔ∏è –£ —Ü–µ–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }

    await goal.deleteOne();
    console.log('‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    res.json({ message: 'Goal deleted' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;
